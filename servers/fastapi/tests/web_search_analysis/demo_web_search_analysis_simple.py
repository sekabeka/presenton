#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Web Search Analysis Service
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def demo_basic_functionality():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    print("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Web Search Analysis Service")
    print("=" * 60)
    
    try:
        from services.web_search_analysis.enhanced_llm_client import EnhancedLLMClient
        from services.web_search_analysis.models import QueryAnalysisRequest
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        client = EnhancedLLMClient()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        test_queries = [
            "Latest AI trends in 2024",
            "What is machine learning?",
            "Current statistics about AI adoption",
            "Recent news about ChatGPT",
            "How does neural networks work?",
            "Today's stock prices for tech companies"
        ]
        
        print("üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–º–æ—â—å—é fallback –º–µ—Ö–∞–Ω–∏–∑–º–∞:")
        print("-" * 50)
        
        for query in test_queries:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∞–Ω–∞–ª–∏–∑ (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç LLM)
            needs_search = client._fallback_web_search_decision(query)
            
            status = "‚úÖ –ù–£–ñ–ï–ù" if needs_search else "‚ùå –ù–ï –ù–£–ñ–ï–ù"
            print(f"{status} | {query}")
        
        print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def demo_models():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìã –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö:")
    print("-" * 50)
    
    try:
        from services.web_search_analysis.models import (
            WebSearchAnalysis, 
            WebSearchTrigger, 
            QueryAnalysisRequest
        )
        
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑
        analysis = WebSearchAnalysis(
            needs_web_search=True,
            confidence=0.85,
            triggers=[WebSearchTrigger.TEMPORAL, WebSearchTrigger.TECHNOLOGY],
            reasoning="Query contains temporal indicators and technology keywords",
            suggested_queries=["AI trends 2024", "latest AI technology"],
            alternative_approach="Use general AI knowledge"
        )
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
        print(f"   –ù—É–∂–µ–Ω –≤–µ–±-–ø–æ–∏—Å–∫: {analysis.needs_web_search}")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis.confidence}")
        print(f"   –¢—Ä–∏–≥–≥–µ—Ä—ã: {[t.value for t in analysis.triggers]}")
        print(f"   –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {analysis.reasoning}")
        print(f"   –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {analysis.suggested_queries}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
        request = QueryAnalysisRequest(
            user_query="Latest AI trends in 2024",
            presentation_context={"topic": "Technology", "domain": "AI"},
            sensitivity="high",
            language="en"
        )
        
        print(f"\nüìù –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑:")
        print(f"   –ó–∞–ø—Ä–æ—Å: {request.user_query}")
        print(f"   –ö–æ–Ω—Ç–µ–∫—Å—Ç: {request.presentation_context}")
        print(f"   –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {request.sensitivity}")
        print(f"   –Ø–∑—ã–∫: {request.language}")
        
        print("\n‚úÖ –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–¥–µ–ª—è—Ö: {e}")
        return False

def demo_api_usage():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API"""
    print("\nüåê –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è API –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
    print("-" * 50)
    
    print("üì° –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
    print("   GET  /api/v1/ppt/web-search-analysis/health")
    print("   GET  /api/v1/ppt/web-search-analysis/triggers")
    print("   POST /api/v1/ppt/web-search-analysis/analyze")
    print("   POST /api/v1/ppt/web-search-analysis/batch-analyze")
    
    print("\nüìù –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∫ API:")
    print("""
curl -X POST "http://localhost:8000/api/v1/ppt/web-search-analysis/analyze" \\
  -H "Content-Type: application/json" \\
  -d '{
    "user_query": "Latest AI trends in 2024",
    "presentation_context": {"topic": "Technology"},
    "sensitivity": "medium",
    "language": "en"
  }'
    """)
    
    print("üìù –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ —Å —É–º–Ω—ã–º –≤–µ–±-–ø–æ–∏—Å–∫–æ–º:")
    print("""
curl -X POST "http://localhost:8000/api/v1/ppt/presentation/generate" \\
  -H "Content-Type: application/json" \\
  -d '{
    "content": "Latest AI trends in 2024",
    "n_slides": 5,
    "web_search": true,
    "smart_web_search": true,
    "language": "English"
  }'
    """)
    
    print("‚úÖ API –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    return True

def demo_integration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("\nüîó –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:")
    print("-" * 50)
    
    print("üìã –ü–∞–π–ø–ª–∞–π–Ω –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:")
    print("1. Frontend –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Å smart_web_search=true")
    print("2. GeneratePresentationRequest –ø–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä")
    print("3. generate_presentation_handler –ø–µ—Ä–µ–¥–∞–µ—Ç –≤ generate_ppt_outline")
    print("4. EnhancedLLMClient –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å")
    print("5. LLMWebSearchAnalyzer –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–µ–Ω –ª–∏ –≤–µ–±-–ø–æ–∏—Å–∫")
    print("6. SearchWebTool –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ")
    print("7. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∫–æ–Ω—Ç—É—Ä –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏")
    
    print("\nüéØ –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã:")
    print("   models/generate_presentation_request.py - API –º–æ–¥–µ–ª—å")
    print("   models/sql/presentation.py - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
    print("   api/v1/ppt/endpoints/presentation.py - API —ç–Ω–¥–ø–æ–∏–Ω—Ç")
    print("   utils/llm_calls/generate_presentation_outlines.py - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è")
    print("   services/web_search_analysis/ - –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞")
    
    print("\n‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    return True

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Web Search Analysis Service")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    demos = [
        demo_models,
        demo_api_usage,
        demo_integration,
    ]
    
    for demo in demos:
        if not demo():
            return False
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
    if not await demo_basic_functionality():
        return False
    
    print("\n" + "=" * 60)
    print("üéâ –í—Å–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print("üí° –°–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ production!")
    
    return True

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
